document.addEventListener("DOMContentLoaded", function () {
  // DOM Elements
  const messageInput = document.getElementById("messageInput");
  const sendBtn = document.getElementById("sendBtn");
  const messagesContainer = document.getElementById("messages");
  const newGroupBtn = document.getElementById("newGroupBtn");
  const newGroupModal = document.getElementById("newGroupModal");
  const closeModalBtns = document.querySelectorAll(".close-modal");
  const groupForm = document.getElementById("groupForm");
  const groupImageInput = document.getElementById("groupImage");
  const groupImagePreview = document.getElementById("groupImagePreview");
  const groupPreviewImage = document.getElementById("groupPreviewImage");
  const chatItems = document.querySelectorAll(".chat-item");
  const closeInfoBtn = document.querySelector(".close-info");
  const groupInfo = document.querySelector(".group-info");
  const ellipsisBtn = document.querySelector(".fa-ellipsis-v").parentElement;

  // Open new group modal
  newGroupBtn.addEventListener("click", function () {
    newGroupModal.classList.add("active");
    document.body.style.overflow = "hidden";
  });

  // Close modal
  closeModalBtns.forEach((btn) => {
    btn.addEventListener("click", function () {
      newGroupModal.classList.remove("active");
      document.body.style.overflow = "auto";
      groupForm.reset();
      groupPreviewImage.style.display = "none";
      groupImagePreview.querySelector("p").style.display = "block";
    });
  });

  // Close modal when clicking outside
  newGroupModal.addEventListener("click", function (e) {
    if (e.target === newGroupModal) {
      newGroupModal.classList.remove("active");
      document.body.style.overflow = "auto";
      groupForm.reset();
      groupPreviewImage.style.display = "none";
      groupImagePreview.querySelector("p").style.display = "block";
    }
  });

  // Group image preview functionality
  groupImageInput.addEventListener("change", function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();

      reader.addEventListener("load", function () {
        groupPreviewImage.style.display = "block";
        groupPreviewImage.setAttribute("src", this.result);
        groupImagePreview.querySelector("p").style.display = "none";
      });

      reader.readAsDataURL(file);
    }
  });

  // Form submission
  groupForm.addEventListener("submit", function (e) {
    e.preventDefault();

    // Get form values
    const groupName = document.getElementById("groupName").value;
    const selectedMembers = document.querySelectorAll(
      ".member-option input:checked"
    );

    // In a real app, you would send this data to the server
    console.log("New group created:", {
      groupName,
      members: Array.from(selectedMembers).map(
        (member) =>
          member.closest(".member-option").querySelector("span").textContent
      ),
      image: groupImageInput.files[0]
        ? groupImageInput.files[0].name
        : "No image",
    });

    // Show success message
    alert("Group created successfully!");

    // Close modal and reset form
    newGroupModal.classList.remove("active");
    document.body.style.overflow = "auto";
    groupForm.reset();
    groupPreviewImage.style.display = "none";
    groupImagePreview.querySelector("p").style.display = "block";
  });

  // Toggle group info sidebar
  ellipsisBtn.addEventListener("click", function () {
    groupInfo.classList.toggle("active");
  });

  closeInfoBtn.addEventListener("click", function () {
    groupInfo.classList.remove("active");
  });

  // Chat item click handler
  chatItems.forEach((item) => {
    item.addEventListener("click", function () {
      // Remove active class from all items
      chatItems.forEach((i) => i.classList.remove("active"));
      // Add active class to clicked item
      this.classList.add("active");

      // In a real app, you would load the chat messages here
      console.log("Loading chat for:", this.querySelector("h3").textContent);
    });
  });

  // Send message functionality
  function sendMessage() {
    const messageText = messageInput.value.trim();
    if (messageText) {
      // Create new message element
      const messageElement = document.createElement("div");
      messageElement.className = "message sent";
      messageElement.innerHTML = `
        <div class="message-content">
          <div class="message-info">
            <span class="sender">You</span>
            <span class="time">${getCurrentTime()}</span>
          </div>
          <div class="message-text">${messageText}</div>
        </div>
      `;

      // Add to messages container
      messagesContainer.appendChild(messageElement);

      // Clear input
      messageInput.value = "";

      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;

      // In a real app, you would send the message to the server here
      console.log("Message sent:", messageText);

      // Simulate reply after 1-3 seconds
      setTimeout(simulateReply, 1000 + Math.random() * 2000);
    }
  }

  // Simulate receiving a message
  function simulateReply() {
    const users = [
      {
        name: "Sunil Patel",
        avatar:
          "https://images.unsplash.com/photo-1603415526960-f7e0328c63b1?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
      },
      {
        name: "Priya Sharma",
        avatar:
          "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
      },
      {
        name: "Amir Khan",
        avatar:
          "https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80",
      },
    ];

    const randomUser = users[Math.floor(Math.random() * users.length)];
    const replies = [
      "That's a great point!",
      "I'll check and get back to you.",
      "Thanks for sharing!",
      "Can we discuss this in our next meeting?",
      "I've had similar experiences on my farm.",
      "Have you tried the new organic fertilizer?",
    ];

    const randomReply = replies[Math.floor(Math.random() * replies.length)];

    const messageElement = document.createElement("div");
    messageElement.className = "message received";
    messageElement.innerHTML = `
      <div class="message-avatar">
        <img src="${randomUser.avatar}" alt="${randomUser.name}">
      </div>
      <div class="message-content">
        <div class="message-info">
          <span class="sender">${randomUser.name}</span>
          <span class="time">${getCurrentTime()}</span>
        </div>
        <div class="message-text">${randomReply}</div>
      </div>
    `;

    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // Get current time in HH:MM format
  function getCurrentTime() {
    const now = new Date();
    return (
      now.getHours().toString().padStart(2, "0") +
      ":" +
      now.getMinutes().toString().padStart(2, "0")
    );
  }

  // Send message on button click
  sendBtn.addEventListener("click", sendMessage);

  // Send message on Enter key
  messageInput.addEventListener("keypress", function (e) {
    if (e.key === "Enter") {
      sendMessage();
    }
  });

  // Close modals with Escape key
  document.addEventListener("keydown", function (e) {
    if (e.key === "Escape") {
      if (newGroupModal.classList.contains("active")) {
        newGroupModal.classList.remove("active");
        document.body.style.overflow = "auto";
      }
      if (groupInfo.classList.contains("active")) {
        groupInfo.classList.remove("active");
      }
    }
  });

  // Initialize - scroll to bottom of messages
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
});
